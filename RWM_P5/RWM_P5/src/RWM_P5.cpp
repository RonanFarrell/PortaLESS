/*
-----------------------------------------------------------------------------
Filename:    RWM_P5.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.8.x Application Wizard for VC10 (May 2012)
      https://bitbucket.org/jacmoe/ogreappwizards
-----------------------------------------------------------------------------
*/

#include "stdafx.h"
#include "RWM_P5.h"

//-------------------------------------------------------------------------------------
RWM_P5::RWM_P5(void)
{
}
//-------------------------------------------------------------------------------------
RWM_P5::~RWM_P5(void)
{
}

//-------------------------------------------------------------------------------------
void RWM_P5::createScene(void)
{
	physics.SetUp();

	hkVector4 floorBox(200.0f, 0.01f, 200.0f);
	hkVector4 floorPosition(0.0f, 0.0f, 0.0f);
	hkpConvexShape * shape = new hkpBoxShape(floorBox, 0);

	hkpRigidBodyCinfo floorInfo;
	floorInfo.m_shape = shape;
	floorInfo.m_motionType = hkpMotion::MOTION_FIXED;
	floorInfo.m_position = floorPosition;
	floorInfo.m_qualityType = HK_COLLIDABLE_QUALITY_FIXED;
	floorInfo.m_restitution = 0.0f;
	floorInfo.m_friction = 0.8f;

	floor = new hkpRigidBody(floorInfo);
	physics.GetPhysicsWorld()->addEntity(floor);
	shape->removeReference();

	Ogre::MeshPtr p =Ogre::MeshManager::getSingleton().createPlane("GroundPlane", 
		Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME, 
		Ogre::Plane(Ogre::Vector3(0.0,1.0,0.0),
			Ogre::Vector3(floorPosition(0),floorPosition(1),floorPosition(2)))
		,400,400,20,20,true, 1,1.0f,1.0f,Ogre::Vector3::UNIT_X);

	Ogre::SceneNode* planeNode = mSceneMgr->getRootSceneNode()->createChildSceneNode();
    Ogre::Entity* entGround = mSceneMgr->createEntity("Viewer_ZXPlane","GroundPlane");
	entGround->setMaterialName("Examples/hashB03B52");
    entGround->setCastShadows(true);
	
	planeNode->attachObject(entGround);


    // Set ambient light
    mSceneMgr->setAmbientLight(Ogre::ColourValue(1.0, 1.0, 1.0));
	mSceneMgr->setShadowTechnique(Ogre::SHADOWTYPE_STENCIL_MODULATIVE);

    // Create a light
    Ogre::Light* l = mSceneMgr->createLight("MainLight");
    l->setPosition(0,30,0);
	l->setCastShadows(true);

	// Create the player
	player = new Player(Ogre::Vector3(0.0f, 1.4f, 0.0f), physics.GetPhysicsWorld(), mSceneMgr);
	qube = new Qube(Ogre::Vector3(5.0f, 5.0f, 0.0f), Ogre::Vector3(1.0f, 1.0f, 1.0f), physics.GetPhysicsWorld(), mSceneMgr);
	ss = new SeeSaw(Ogre::Vector3(20.0f, 1.0f, 0.0f), Ogre::Vector3(5.0f, 0.2f, 1.0f), Ogre::Vector3(0.0f, 0.0f, 1.0f), physics.GetPhysicsWorld(), mSceneMgr);

	buildingBlocks.push_back(new BuildingBlock(Vector3(0, 0.5, 0), Vector3(2.1, 1, 2.1), "Examples/hash6BC34B", physics.GetPhysicsWorld(), mSceneMgr));
	buildingBlocks.push_back(new BuildingBlock(Vector3(2, 1.0, 0), Vector3(2.1, 2, 2.1), "Examples/hash6BC34B", physics.GetPhysicsWorld(), mSceneMgr));
	buildingBlocks.push_back(new BuildingBlock(Vector3(4, 1.5, 0), Vector3(2.1, 3, 2.1), "Examples/hash6BC34B", physics.GetPhysicsWorld(), mSceneMgr));
	buildingBlocks.push_back(new BuildingBlock(Vector3(6, 2.0, 0), Vector3(2.1, 4, 2.1), "Examples/hash6BC34B", physics.GetPhysicsWorld(), mSceneMgr));

	buildingBlocks.push_back(new BuildingBlock(Vector3(8, 3.5, 0), Vector3(2.1, 1, 2.1), "Examples/hash6BC34B", physics.GetPhysicsWorld(), mSceneMgr));
	buildingBlocks.push_back(new BuildingBlock(Vector3(10, 3.0, 0), Vector3(2.1, 2, 2.1), "Examples/hash6BC34B", physics.GetPhysicsWorld(), mSceneMgr));
	buildingBlocks.push_back(new BuildingBlock(Vector3(12, 2.5, 0), Vector3(2.1, 3, 2.1), "Examples/hash6BC34B", physics.GetPhysicsWorld(), mSceneMgr));
	buildingBlocks.push_back(new BuildingBlock(Vector3(14, 2.0, 0), Vector3(2.1, 4, 2.1), "Examples/hash6BC34B", physics.GetPhysicsWorld(), mSceneMgr));
}



#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        RWM_P5 app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
